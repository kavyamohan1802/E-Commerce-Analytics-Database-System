-- SMART BUSINESS INTELLIGENCE DASHBOARD
CREATE TABLE customers (id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(50));
CREATE TABLE products (id INT PRIMARY KEY, name VARCHAR(50), price DECIMAL(8,2));
CREATE TABLE orders (id INT PRIMARY KEY, customer_id INT, product_id INT, quantity INT, order_date DATE);

-- Sample data
INSERT INTO customers VALUES (1, 'John', 'john@email.com'), (2, 'Sarah', 'sarah@email.com');
INSERT INTO products VALUES (1, 'Laptop', 999.99), (2, 'Phone', 599.99), (3, 'Headphones', 199.99);
INSERT INTO orders VALUES 
(1, 1, 1, 1, '2024-01-15'), (2, 1, 3, 2, '2024-01-20'),
(3, 2, 2, 1, '2024-02-05'), (4, 2, 1, 1, '2024-02-10');

-- 1. Customer spending analysis
SELECT 
    c.name,
    COUNT(o.id) as total_orders,
    SUM(p.price * o.quantity) as total_spent,
    AVG(p.price * o.quantity) as avg_order_value
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN products p ON o.product_id = p.id
GROUP BY c.id, c.name
ORDER BY total_spent DESC;

-- 2. Product sales performance
SELECT 
    p.name,
    SUM(o.quantity) as units_sold,
    SUM(p.price * o.quantity) as revenue,
    COUNT(DISTINCT o.customer_id) as unique_buyers
FROM products p
JOIN orders o ON p.id = o.product_id
GROUP BY p.id, p.name
ORDER BY revenue DESC;

-- 3. Monthly sales trends
SELECT 
    DATE_FORMAT(order_date, '%Y-%m') as month,
    COUNT(id) as total_orders,
    SUM(p.price * o.quantity) as monthly_revenue
FROM orders o
JOIN products p ON o.product_id = p.id
GROUP BY DATE_FORMAT(order_date, '%Y-%m')
ORDER BY month;
